--- tests/integration/test_voice_streaming.py
+++ tests/integration/test_voice_streaming.py
@@ -51,125 +51,166 @@
     @pytest.mark.asyncio
     async def test_websocket_connection_success(self):
         """Test successful WebSocket connection and configuration"""
-        with TestClient(app) as client:
-            # Mock the Deepgram service
-            with patch('app.api.voice_streaming.deepgram_stt_service') as mock_service:
-                mock_service.api_key = "test_key"
-                
-                # Mock the handler
-                with patch('app.api.voice_streaming.DeepgramStreamingHandler') as MockHandler:
-                    mock_handler = AsyncMock()
-                    mock_handler.run = AsyncMock()
-                    MockHandler.return_value = mock_handler
-                    
-                    # Connect to WebSocket
-                    with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
-                        # Send config
-                        websocket.send_json({
-                            "type": "config",
-                            "config": {
-                                "model": "nova-2",
-                                "language": "en-US"
-                            }
-                        })
+        # Mock connection_health and buffer_manager
+        with patch('app.api.voice_streaming.connection_health') as mock_health, \
+             patch('app.core.websocket_queue.buffer_manager') as mock_buffer_manager:
+            
+            # Setup connection_health mock to prevent DB operations
+            mock_health._ensure_initialized = AsyncMock()
+            mock_health.enqueue_connection = AsyncMock(return_value="test-connection-id")
+            mock_health.disconnect = AsyncMock()
+            
+            with TestClient(app) as client:
+                # Mock the Deepgram service
+                with patch('app.api.voice_streaming.deepgram_stt_service') as mock_service:
+                    mock_service.api_key = "test_key"
+                    
+                    # Mock the handler
+                    with patch('app.api.voice_streaming.DeepgramStreamingHandler') as MockHandler:
+                        mock_handler = AsyncMock()
+                        mock_handler.run = AsyncMock()
+                        MockHandler.return_value = mock_handler
                         
-                        # Give async tasks time to run
-                        import time
-                        time.sleep(0.1)
-                        
-                        # Verify handler was created and run
-                        MockHandler.assert_called_once()
-                        mock_handler.run.assert_called_once()
+                        # Connect to WebSocket
+                        with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
+                            # Send config
+                            websocket.send_json({
+                                "type": "config",
+                                "config": {
+                                    "model": "nova-2",
+                                    "language": "en-US"
+                                }
+                            })
+                            
+                            # Give async tasks time to run
+                            import time
+                            time.sleep(0.1)
+                            
+                            # Verify handler was created and run
+                            MockHandler.assert_called_once()
+                            mock_handler.run.assert_called_once()
     
     @pytest.mark.asyncio
     async def test_websocket_invalid_config(self):
         """Test WebSocket with invalid configuration"""
-        with TestClient(app) as client:
-            with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
-                # Send invalid config message
-                websocket.send_json({
-                    "type": "invalid",
-                    "data": "test"
-                })
-                
-                # Should receive error
-                response = websocket.receive_json()
-                assert response["type"] == "error"
-                assert "Expected config message" in response["message"]
+        # Mock connection_health and buffer_manager
+        with patch('app.api.voice_streaming.connection_health') as mock_health, \
+             patch('app.core.websocket_queue.buffer_manager') as mock_buffer_manager:
+            
+            # Setup connection_health mock to prevent DB operations
+            mock_health._ensure_initialized = AsyncMock()
+            mock_health.enqueue_connection = AsyncMock(return_value="test-connection-id")
+            mock_health.disconnect = AsyncMock()
+            
+            with TestClient(app) as client:
+                with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
+                    # Send invalid config message
+                    websocket.send_json({
+                        "type": "invalid",
+                        "data": "test"
+                    })
+                    
+                    # Should receive error
+                    response = websocket.receive_json()
+                    assert response["type"] == "error"
+                    assert "Expected config message" in response["message"]
     
     @pytest.mark.asyncio
     async def test_websocket_timeout_waiting_for_config(self):
         """Test WebSocket timeout when no config is sent"""
-        with TestClient(app) as client:
-            # Reduce timeout for faster test
-            with patch('app.api.voice_streaming.asyncio.wait_for') as mock_wait_for:
-                mock_wait_for.side_effect = asyncio.TimeoutError()
-                
-                with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
-                    response = websocket.receive_json()
-                    assert response["type"] == "error"
-                    assert "Timeout" in response["message"]
+        # Mock connection_health and buffer_manager
+        with patch('app.api.voice_streaming.connection_health') as mock_health, \
+             patch('app.core.websocket_queue.buffer_manager') as mock_buffer_manager:
+            
+            # Setup connection_health mock to prevent DB operations
+            mock_health._ensure_initialized = AsyncMock()
+            mock_health.enqueue_connection = AsyncMock(return_value="test-connection-id")
+            mock_health.disconnect = AsyncMock()
+            
+            with TestClient(app) as client:
+                # Reduce timeout for faster test
+                with patch('app.api.voice_streaming.asyncio.wait_for') as mock_wait_for:
+                    mock_wait_for.side_effect = asyncio.TimeoutError()
+                    
+                    with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
+                        response = websocket.receive_json()
+                        assert response["type"] == "error"
+                        assert "Timeout" in response["message"]
     
     @pytest.mark.asyncio
     async def test_websocket_audio_streaming_flow(self):
         """Test complete audio streaming flow"""
-        with TestClient(app) as client:
-            # Mock the entire handler to simulate streaming
-            with patch('app.api.voice_streaming.DeepgramStreamingHandler') as MockHandler:
-                mock_handler = AsyncMock()
-                
-                # Simulate the handler sending transcription results
-                async def mock_run(config):
-                    # Send ready message
-                    await mock_handler.client_ws.send_json({
-                        "type": "ready",
-                        "message": "Connected to Deepgram"
-                    })
-                    
-                    # Simulate receiving audio and sending transcription
-                    await asyncio.sleep(0.1)
-                    
-                    await mock_handler.client_ws.send_json({
-                        "type": "transcription",
-                        "transcript": "Hello world",
-                        "is_final": True,
-                        "speech_final": True
-                    })
-                
-                mock_handler.run = mock_run
-                mock_handler.stop = AsyncMock()
-                MockHandler.return_value = mock_handler
-                
-                with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
-                    # Inject the websocket into our mock
-                    mock_handler.client_ws = websocket
-                    
-                    # Send config
-                    websocket.send_json({
-                        "type": "config",
-                        "config": {"model": "nova-2"}
-                    })
+        # Mock connection_health and buffer_manager
+        with patch('app.api.voice_streaming.connection_health') as mock_health, \
+             patch('app.core.websocket_queue.buffer_manager') as mock_buffer_manager:
+            
+            # Setup connection_health mock to prevent DB operations
+            mock_health._ensure_initialized = AsyncMock()
+            mock_health.enqueue_connection = AsyncMock(return_value="test-connection-id")
+            mock_health.disconnect = AsyncMock()
+            
+            with TestClient(app) as client:
+                # Mock the entire handler to simulate streaming
+                with patch('app.api.voice_streaming.DeepgramStreamingHandler') as MockHandler:
+                    mock_handler = AsyncMock()
                     
-                    # Receive ready message
-                    response = websocket.receive_json()
-                    assert response["type"] == "ready"
+                    # Simulate the handler sending transcription results
+                    async def mock_run(config):
+                        # Send ready message
+                        await mock_handler.client_ws.send_json({
+                            "type": "ready",
+                            "message": "Connected to Deepgram"
+                        })
+                        
+                        # Simulate receiving audio and sending transcription
+                        await asyncio.sleep(0.1)
+                        
+                        await mock_handler.client_ws.send_json({
+                            "type": "transcription",
+                            "transcript": "Hello world",
+                            "is_final": True,
+                            "speech_final": True
+                        })
                     
-                    # Send audio data
-                    websocket.send_bytes(b"fake_audio_data")
+                    mock_handler.run = mock_run
+                    mock_handler.stop = AsyncMock()
+                    MockHandler.return_value = mock_handler
                     
-                    # Receive transcription
-                    response = websocket.receive_json()
-                    assert response["type"] == "transcription"
-                    assert response["transcript"] == "Hello world"
+                    with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
+                        # Inject the websocket into our mock
+                        mock_handler.client_ws = websocket
+                        
+                        # Send config
+                        websocket.send_json({
+                            "type": "config",
+                            "config": {"model": "nova-2"}
+                        })
+                        
+                        # Receive ready message
+                        response = websocket.receive_json()
+                        assert response["type"] == "ready"
+                        
+                        # Send audio data
+                        websocket.send_bytes(b"fake_audio_data")
+                        
+                        # Receive transcription
+                        response = websocket.receive_json()
+                        assert response["type"] == "transcription"
+                        assert response["transcript"] == "Hello world"
     
     @pytest.mark.asyncio
     async def test_websocket_connection_limit(self):
         """Test connection limit handling"""
-        with TestClient(app) as client:
-            # Mock connection health to simulate at capacity
-            with patch('app.api.voice_streaming.connection_health') as mock_health:
-                mock_health.enqueue_connection = AsyncMock(return_value=None)
-                
+        # Mock connection_health and buffer_manager
+        with patch('app.api.voice_streaming.connection_health') as mock_health, \
+             patch('app.core.websocket_queue.buffer_manager') as mock_buffer_manager:
+            
+            # Setup connection_health mock to simulate capacity limit
+            mock_health._ensure_initialized = AsyncMock()
+            mock_health.enqueue_connection = AsyncMock(return_value=None)  # Return None to indicate at capacity
+            mock_health.disconnect = AsyncMock()
+            
+            with TestClient(app) as client:
                 with client.websocket_connect("/api/ws/voice/streaming-stt") as websocket:
                     response = websocket.receive_json()
                     assert response["type"] == "error"